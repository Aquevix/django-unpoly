{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"django-unpoly \u00b6 Unpoly integration and utilities for Django Free software: MIT Documentation: https://jwaschkau.github.io/django-unpoly/ Features \u00b6 Implements the Unpoly Server protocol (https://unpoly.com/up.protocol) Provides utilities for using Unpoly with Django. django-debug-toolbar support (https://github.com/jazzband/django-debug-toolbar). django-concurrency support (https://github.com/saxix/django-concurrency). Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#django-unpoly","text":"Unpoly integration and utilities for Django Free software: MIT Documentation: https://jwaschkau.github.io/django-unpoly/","title":"django-unpoly"},{"location":"#features","text":"Implements the Unpoly Server protocol (https://unpoly.com/up.protocol) Provides utilities for using Unpoly with Django. django-debug-toolbar support (https://github.com/jazzband/django-debug-toolbar). django-concurrency support (https://github.com/saxix/django-concurrency).","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"::: django_unpoly.up","title":"modules"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Jannik Eilers j.waschkau@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Jannik Eilers j.waschkau@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/jwaschkau/django-unpoly/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 django-unpoly could always use more documentation, whether as part of the official django-unpoly docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/jwaschkau/django-unpoly/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up django-unpoly for local development. Fork the django-unpoly repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/django-unpoly.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/jwaschkau/django-unpoly/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_django_unpoly ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/jwaschkau/django-unpoly/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"django-unpoly could always use more documentation, whether as part of the official django-unpoly docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/jwaschkau/django-unpoly/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up django-unpoly for local development. Fork the django-unpoly repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/django-unpoly.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/jwaschkau/django-unpoly/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_django_unpoly ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2021-06-07) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2021-06-07","text":"First release on PyPI.","title":"0.1.0 (2021-06-07)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install django-unpoly, run this command in your terminal: 1 $ pip install django-unpoly This is the preferred method to install django-unpoly, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for django-unpoly can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/jwaschkau/django-unpoly Or download the tarball : 1 $ curl -OJL https://github.com/jwaschkau/django-unpoly/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install django-unpoly, run this command in your terminal: 1 $ pip install django-unpoly This is the preferred method to install django-unpoly, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for django-unpoly can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/jwaschkau/django-unpoly Or download the tarball : 1 $ curl -OJL https://github.com/jwaschkau/django-unpoly/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use django-unpoly in a project 1 2 3 4 5 MIDDLEWARE = [ ... 'django_unpoly.middleware.UpMiddleware' , ... ] Unpoly forms \u00b6 The target is determined automatically if the model uses the UnpolyModelIdMixin . 1 2 3 4 5 6 7 8 from django_unpoly.up import UpViewMixin from django.views.generic import UpdateView class MyUnpolyModelView ( UpModelViewMixin , UpdateView ): autosubmit = True form_class = MyFormClass template_name = 'django_unpoly/form.unpoly.html' model = MyModel django-debug-toolbar \u00b6 In your main layout include the following js-file. 1 < script src = \"{% static 'django_unpoly/up_djdt.js' %}\" ></ script > django-concurrency \u00b6 The current version of the model has to be added to the unpoly form url. Before the form is rendered the version will be checked for changes. The version field should also be added to the form to prevent concurrent changes to the model. 1 2 3 4 version={model.version} < a up-modal = \"#main\" href = \"{% url 'myurl' model.id %}?version={{ model.version }}\" > MyModal </ a > 1 2 3 4 5 6 7 8 from django_unpoly.up import UpModelViewMixin , UpDjangoConcurrencyMixin from django.views.generic import UpdateView class MyUnpolyModelView ( UpDjangoConcurrencyMixin , UpModelViewMixin , UpdateView ): autosubmit = True form_class = MyFormClass template_name = 'django_unpoly/form.unpoly.html' model = MyModel","title":"usage"},{"location":"usage/#usage","text":"To use django-unpoly in a project 1 2 3 4 5 MIDDLEWARE = [ ... 'django_unpoly.middleware.UpMiddleware' , ... ]","title":"Usage"},{"location":"usage/#unpoly-forms","text":"The target is determined automatically if the model uses the UnpolyModelIdMixin . 1 2 3 4 5 6 7 8 from django_unpoly.up import UpViewMixin from django.views.generic import UpdateView class MyUnpolyModelView ( UpModelViewMixin , UpdateView ): autosubmit = True form_class = MyFormClass template_name = 'django_unpoly/form.unpoly.html' model = MyModel","title":"Unpoly forms"},{"location":"usage/#django-debug-toolbar","text":"In your main layout include the following js-file. 1 < script src = \"{% static 'django_unpoly/up_djdt.js' %}\" ></ script >","title":"django-debug-toolbar"},{"location":"usage/#django-concurrency","text":"The current version of the model has to be added to the unpoly form url. Before the form is rendered the version will be checked for changes. The version field should also be added to the form to prevent concurrent changes to the model. 1 2 3 4 version={model.version} < a up-modal = \"#main\" href = \"{% url 'myurl' model.id %}?version={{ model.version }}\" > MyModal </ a > 1 2 3 4 5 6 7 8 from django_unpoly.up import UpModelViewMixin , UpDjangoConcurrencyMixin from django.views.generic import UpdateView class MyUnpolyModelView ( UpDjangoConcurrencyMixin , UpModelViewMixin , UpdateView ): autosubmit = True form_class = MyFormClass template_name = 'django_unpoly/form.unpoly.html' model = MyModel","title":"django-concurrency"}]}